Goal -> MainClass ClassDeclarations .
MainClass -> class id lbrack void id lpar string lbrack rbrack id rpar lbrack BlockStatements rbrack rbrack .
ClassDeclarations -> ClassDeclaration ClassDeclarations .
ClassDeclarations -> .
ClassDeclaration -> class id ExtendsOpt lbrack ClassMembers rbrack .
ExtendsOpt -> extends id .
ExtendsOpt -> .
ClassMembers -> VarDeclaration ClassMembers .
ClassMembers -> MethodDeclaration ClassMembers .
ClassMembers -> .
VarDeclaration -> Type id semicolon .
MethodDeclaration -> Type id lpar Params rpar lbrack BlockStatements rbrack .
Params -> Param ParamsRest .
Params -> .
ParamsRest -> comma Param ParamsRest .
ParamsRest -> .
Param -> Type id .
BlockStatements -> VarDeclaration BlockStatements .
BlockStatements -> Statement BlockStatements .
BlockStatements -> .
Type -> Type lbrack rbrack
Type -> boolean
Type -> int
Type -> void
Type -> id

Statement -> lbrack BlockStatements rbrack
Statement -> if lpar Expression rpar Statement ElseOpt
Statement -> while lpar Expression rpar Statement
Statement -> LValue eq Expression semicolon
Statement ->

ElseOpt -> else Statement .
ElseOpt -> .
Expression

hStatementi ::=
“{” hBlockStatementsi “}”
| “if” “(” hExpressioni “)” hStatementi [ “else” hStatementi ]
| “while” “(” hExpressioni “)” hStatementi
| “System” “.” “out” “.” “println” “(” hExpressioni “)” “;”

| Identifier “=” hExpressioni “;”
| Identifier “[” hExpressioni “]” “=” hExpressioni “;”
| “continue” “;”
| “break” “;”
| “return” hExpressioni “;”


expr : expr '>' expr
     | expr '<' expr
     | expr '>=' expr
     | expr '<=' expr
     | expr '==' expr
     | expr '!=' expr
     | expr '||' expr
     | expr '&&' expr
     | expr '-' expr
     | expr '+' expr
     | expr '-' expr
     | expr '/' expr
     | expr '*' expr
     | expr '%' expr
     | expr '[' expr ']'
     | '{' expr_list '}'
     | expr '.' TOK_ID '(' exprlist ')'
     | TOK_LIT_INT
     | TOK_LIT_STR
     | TOK_TRUE
     | TOK_FALSE
     | TOK_THIS '.' TOK_ID
     | TOK_THIS
     | TOK_ID
     | TOK_NULL
     | TOK_NEW type filledbracks
     | TOK_NEW type '(' exprlist ')'
     | '+' expr
     | '-' expr
     | '!' expr
     | '(' expr ')'
     ; 

exprlist : expr ',' exprlist
         | 
         ;

filledbracks : '[' expr ']' filledbracks
             | 
             ; 
